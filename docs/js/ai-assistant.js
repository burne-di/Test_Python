// AI Assistant with Gemini
class AIAssistant {
    constructor() {
        this.apiKey = null;
        this.conversationHistory = [];
        this.isEnabled = false;
        this.loadAPIKey();
    }

    loadAPIKey() {
        // Load API key from localStorage
        this.apiKey = localStorage.getItem('gemini_api_key');
        this.isEnabled = !!this.apiKey;
    }

    saveAPIKey(key) {
        this.apiKey = key;
        localStorage.setItem('gemini_api_key', key);
        this.isEnabled = true;
    }

    removeAPIKey() {
        this.apiKey = null;
        localStorage.removeItem('gemini_api_key');
        this.isEnabled = false;
        this.conversationHistory = [];
    }

    async sendMessage(userMessage, context = {}) {
        if (!this.isEnabled || !this.apiKey) {
            throw new Error('API key no configurada. Ve a Configuraci√≥n para agregar tu Gemini API key.');
        }

        try {
            // Build context for AI
            const systemPrompt = this.buildSystemPrompt(context);

            // Add to conversation history
            this.conversationHistory.push({
                role: 'user',
                parts: [{ text: userMessage }]
            });

            // Call Gemini API
            const response = await fetch(
                `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent?key=${this.apiKey}`,
                {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        contents: [
                            {
                                role: 'user',
                                parts: [{ text: systemPrompt }]
                            },
                            ...this.conversationHistory
                        ],
                        generationConfig: {
                            temperature: 0.7,
                            maxOutputTokens: 1000,
                        }
                    })
                }
            );

            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.error?.message || 'Error al comunicarse con Gemini API');
            }

            const data = await response.json();
            const aiResponse = data.candidates[0].content.parts[0].text;

            // Add AI response to history
            this.conversationHistory.push({
                role: 'model',
                parts: [{ text: aiResponse }]
            });

            return aiResponse;

        } catch (error) {
            console.error('AI Assistant Error:', error);
            throw error;
        }
    }

    buildSystemPrompt(context) {
        const { exercise, userCode, error, testResults } = context;

        let prompt = `Eres un asistente de programaci√≥n especializado en Data Engineering para ejercicios de pr√°ctica.

CONTEXTO DEL EJERCICIO:
T√≠tulo: ${exercise?.title || 'N/A'}
Categor√≠a: ${exercise?.category || 'N/A'}
Dificultad: ${exercise?.difficulty || 'N/A'}

Descripci√≥n: ${exercise?.description || 'N/A'}

Instrucciones:
${exercise?.instructions || 'N/A'}
`;

        if (userCode) {
            prompt += `\n\nC√ìDIGO ACTUAL DEL USUARIO:\n\`\`\`${exercise?.category || 'python'}\n${userCode}\n\`\`\``;
        }

        if (error) {
            prompt += `\n\nERROR ENCONTRADO:\n${error}`;
        }

        if (testResults) {
            prompt += `\n\nRESULTADOS DE TEST:\n${JSON.stringify(testResults, null, 2)}`;
        }

        prompt += `\n\nREGLAS:
1. Da respuestas concisas y espec√≠ficas (m√°ximo 3-4 l√≠neas)
2. NO des la soluci√≥n completa, solo hints y explicaciones
3. Si hay error, explica QU√â est√° mal y POR QU√â
4. Sugiere documentaci√≥n relevante cuando sea apropiado
5. Usa ejemplos simples para ilustrar conceptos
6. Si el usuario pregunta "dame la soluci√≥n", responde con hints m√°s espec√≠ficos pero NO el c√≥digo completo
7. Fomenta el aprendizaje, no copies y pegues

FORMATO DE RESPUESTA:
- Usa markdown para c√≥digo: \`c√≥digo\`
- Usa bullet points para listas
- S√© amigable y motivador`;

        return prompt;
    }

    clearHistory() {
        this.conversationHistory = [];
    }

    getQuickHint(context) {
        const hints = [
            "üí° Lee cuidadosamente el mensaje de error - te dice exactamente qu√© est√° mal",
            "üîç Revisa la sintaxis de la funci√≥n que est√°s usando",
            "üìö Consulta la tab de 'Teor√≠a' para recordar los conceptos",
            "üéØ Aseg√∫rate de que los nombres de variables coincidan",
            "‚ö° Verifica que est√©s usando los par√°metros correctos",
            "üß™ Prueba tu c√≥digo con un ejemplo simple primero",
            "üìä Imprime valores intermedios para debuggear: print(variable)",
            "üîß Usa type() para verificar el tipo de datos: print(type(variable))"
        ];

        return hints[Math.floor(Math.random() * hints.length)];
    }
}

// Initialize global assistant
const aiAssistant = new AIAssistant();
