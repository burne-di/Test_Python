{
  "exercises": [
    {
      "id": "learn_001",
      "title": "List Comprehensions - Crear Lista",
      "instruction": "Usa list comprehension para crear una lista con los cuadrados de números del 1 al 10. Completa el código reemplazando ___.",
      "theory": "Las list comprehensions permiten crear listas de forma concisa. La sintaxis es: [expresion for variable in iterable]",
      "syntax": "[x**2 for x in range(1, 11)]",
      "example": {
        "code": "# Crear lista de cubos\ncubos = [x**3 for x in range(1, 6)]\nprint(cubos)  # [1, 8, 27, 64, 125]",
        "explanation": "Genera cubos de números del 1 al 5"
      },
      "starterCode": "# Crea una lista con los cuadrados de 1 a 10\ncuadrados = ___\n\n# Imprime el resultado\nprint(cuadrados)",
      "solution": "cuadrados = [x**2 for x in range(1, 11)]",
      "test": "cuadrados == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]",
      "hints": [
        "Usa la sintaxis: [expresion for x in range(...)]",
        "La expresión debe ser x**2 para elevar al cuadrado",
        "range(1, 11) genera números del 1 al 10"
      ],
      "successMessage": "¡Excelente! Ahora sabes crear listas con comprehensions."
    },

    {
      "id": "learn_002",
      "title": "List Comprehensions - Filtrar",
      "instruction": "Usa list comprehension con condición if para crear una lista solo con números pares del 1 al 20.",
      "theory": "Puedes agregar una condición al final de la list comprehension: [expresion for variable in iterable if condicion]",
      "syntax": "[x for x in range(1, 21) if x % 2 == 0]",
      "example": {
        "code": "# Filtrar múltiplos de 3\nmultiplos_3 = [x for x in range(1, 16) if x % 3 == 0]\nprint(multiplos_3)  # [3, 6, 9, 12, 15]",
        "explanation": "Filtra solo números divisibles por 3"
      },
      "starterCode": "# Crea una lista solo con números pares del 1 al 20\npares = ___\n\n# Imprime el resultado\nprint(pares)",
      "solution": "pares = [x for x in range(1, 21) if x % 2 == 0]",
      "test": "pares == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]",
      "hints": [
        "Usa la condición: if x % 2 == 0 (resto de división por 2 es 0)",
        "range(1, 21) genera números del 1 al 20",
        "La sintaxis completa: [x for x in range(...) if condicion]"
      ],
      "successMessage": "¡Perfecto! Ahora puedes filtrar elementos con comprehensions."
    },

    {
      "id": "learn_003",
      "title": "Lambda Functions - Map",
      "instruction": "Usa lambda con map() para convertir una lista de temperaturas Celsius a Fahrenheit. Fórmula: F = C * 9/5 + 32",
      "theory": "Las funciones lambda son funciones anónimas de una sola línea. Se usan frecuentemente con map(), filter() y sorted(). Sintaxis: lambda parametros: expresion",
      "syntax": "lambda c: c * 9/5 + 32",
      "example": {
        "code": "# Duplicar números con lambda\nnumeros = [1, 2, 3, 4, 5]\ndobles = list(map(lambda x: x * 2, numeros))\nprint(dobles)  # [2, 4, 6, 8, 10]",
        "explanation": "Lambda multiplica cada número por 2"
      },
      "starterCode": "# Lista de temperaturas en Celsius\ncelsius = [0, 10, 20, 30, 40]\n\n# Convierte a Fahrenheit usando map() y lambda\nfahrenheit = list(map(___, celsius))\n\n# Imprime el resultado\nprint(fahrenheit)",
      "solution": "fahrenheit = list(map(lambda c: c * 9/5 + 32, celsius))",
      "test": "fahrenheit == [32.0, 50.0, 68.0, 86.0, 104.0]",
      "hints": [
        "Lambda debe tener la fórmula: lambda c: c * 9/5 + 32",
        "map() aplica la función a cada elemento de celsius",
        "No olvides convertir a list() con list(map(...))"
      ],
      "successMessage": "¡Genial! Ya puedes usar lambdas para transformar listas."
    },

    {
      "id": "learn_004",
      "title": "Lambda Functions - Filter",
      "instruction": "Usa lambda con filter() para obtener solo las palabras que tienen más de 5 letras.",
      "theory": "filter() mantiene solo los elementos donde la función retorna True. Se combina perfectamente con lambdas para filtrado conciso.",
      "syntax": "lambda palabra: len(palabra) > 5",
      "example": {
        "code": "# Filtrar números mayores a 10\nnumeros = [5, 12, 8, 15, 3, 20]\nmayores = list(filter(lambda x: x > 10, numeros))\nprint(mayores)  # [12, 15, 20]",
        "explanation": "Lambda retorna True si x > 10"
      },
      "starterCode": "# Lista de palabras\npalabras = ['hola', 'python', 'data', 'engineering', 'sql', 'pandas']\n\n# Filtra palabras con más de 5 letras\npalabras_largas = list(filter(___, palabras))\n\n# Imprime el resultado\nprint(palabras_largas)",
      "solution": "palabras_largas = list(filter(lambda palabra: len(palabra) > 5, palabras))",
      "test": "palabras_largas == ['python', 'engineering', 'pandas']",
      "hints": [
        "Lambda debe usar len(palabra) para contar letras",
        "La condición es: len(palabra) > 5",
        "filter() retorna un iterador, conviértelo con list()"
      ],
      "successMessage": "¡Excelente! Ahora dominas filter() con lambda."
    },

    {
      "id": "learn_005",
      "title": "Pandas - Leer CSV",
      "instruction": "Importa pandas y lee el archivo 'sample_data.csv' en un DataFrame llamado 'df'. Luego imprime las primeras 3 filas.",
      "theory": "Pandas es la librería principal para análisis de datos en Python. pd.read_csv() lee archivos CSV y retorna un DataFrame. df.head(n) muestra las primeras n filas.",
      "syntax": "df = pd.read_csv('archivo.csv')",
      "example": {
        "code": "import pandas as pd\ndf = pd.read_csv('data.csv')\nprint(df.head())  # Primeras 5 filas por defecto",
        "explanation": "Lee data.csv y muestra las primeras filas"
      },
      "starterCode": "# Importa pandas\nimport pandas as pd\n\n# Lee el archivo sample_data.csv\ndf = ___\n\n# Imprime las primeras 3 filas\nprint(df.head(___))",
      "solution": "df = pd.read_csv('sample_data.csv'); print(df.head(3))",
      "test": "len(df) > 0 and len(df.columns) > 0",
      "hints": [
        "Usa pd.read_csv('sample_data.csv')",
        "df.head(3) muestra las primeras 3 filas",
        "Asegúrate de importar pandas as pd primero"
      ],
      "successMessage": "¡Bien! Ya sabes leer archivos CSV con Pandas."
    },

    {
      "id": "learn_006",
      "title": "Pandas - Filtrar Filas",
      "instruction": "Crea un DataFrame con estudiantes y sus calificaciones. Filtra solo los estudiantes que tienen nota >= 70.",
      "theory": "Puedes filtrar filas en Pandas usando condiciones booleanas: df[df['columna'] > valor]. Esto retorna solo las filas donde la condición es True.",
      "syntax": "df[df['nota'] >= 70]",
      "example": {
        "code": "import pandas as pd\ndf = pd.DataFrame({'edad': [25, 30, 35]})\nadultos = df[df['edad'] >= 30]\nprint(adultos)  # Solo filas con edad >= 30",
        "explanation": "Filtra filas donde edad es >= 30"
      },
      "starterCode": "import pandas as pd\n\n# Crea el DataFrame\ndf = pd.DataFrame({\n    'nombre': ['Ana', 'Bob', 'Carlos', 'Diana'],\n    'nota': [85, 65, 90, 55]\n})\n\n# Filtra estudiantes con nota >= 70\naprobados = ___\n\n# Imprime el resultado\nprint(aprobados)",
      "solution": "aprobados = df[df['nota'] >= 70]",
      "test": "len(aprobados) == 2 and aprobados['nota'].min() >= 70",
      "hints": [
        "Usa la sintaxis: df[df['nota'] >= 70]",
        "Los corchetes exteriores filtran el DataFrame",
        "df['nota'] >= 70 crea una máscara booleana"
      ],
      "successMessage": "¡Perfecto! Ahora puedes filtrar DataFrames fácilmente."
    },

    {
      "id": "learn_007",
      "title": "Pandas - Apply Function",
      "instruction": "Usa apply() para crear una nueva columna 'categoria' que clasifique notas: 'Alto' si >= 80, 'Medio' si >= 60, 'Bajo' si < 60.",
      "theory": "df['columna'].apply(funcion) aplica una función a cada elemento de la columna. Puedes usar una función regular o una lambda.",
      "syntax": "df['columna'].apply(lambda x: 'resultado' if condicion else 'otro')",
      "example": {
        "code": "import pandas as pd\ndf = pd.DataFrame({'precio': [10, 50, 100]})\ndf['rango'] = df['precio'].apply(lambda x: 'Caro' if x > 50 else 'Barato')\nprint(df)",
        "explanation": "Clasifica precios en 'Caro' o 'Barato'"
      },
      "starterCode": "import pandas as pd\n\ndf = pd.DataFrame({\n    'nombre': ['Ana', 'Bob', 'Carlos'],\n    'nota': [85, 65, 45]\n})\n\n# Define la función de clasificación\ndef clasificar(nota):\n    if nota >= 80:\n        return 'Alto'\n    elif nota >= 60:\n        return 'Medio'\n    else:\n        return 'Bajo'\n\n# Aplica la función a la columna 'nota'\ndf['categoria'] = ___\n\n# Imprime el resultado\nprint(df)",
      "solution": "df['categoria'] = df['nota'].apply(clasificar)",
      "test": "df['categoria'].tolist() == ['Alto', 'Medio', 'Bajo']",
      "hints": [
        "Usa df['nota'].apply(clasificar)",
        "apply() llama a clasificar() para cada nota",
        "No pongas paréntesis en clasificar (no clasificar())"
      ],
      "successMessage": "¡Excelente! Apply es muy útil para transformar datos."
    },

    {
      "id": "learn_008",
      "title": "Pandas - GroupBy Sum",
      "instruction": "Agrupa por 'region' y calcula la suma de 'ventas' para cada región.",
      "theory": "groupby() agrupa filas por valores únicos de una columna. Luego puedes aplicar agregaciones como sum(), mean(), count(), etc. Sintaxis: df.groupby('columna')['columna_a_agregar'].sum()",
      "syntax": "df.groupby('region')['ventas'].sum()",
      "example": {
        "code": "import pandas as pd\ndf = pd.DataFrame({\n    'categoria': ['A', 'B', 'A', 'B'],\n    'cantidad': [10, 20, 15, 25]\n})\ntotal = df.groupby('categoria')['cantidad'].sum()\nprint(total)  # A: 25, B: 45",
        "explanation": "Suma cantidades agrupadas por categoría"
      },
      "starterCode": "import pandas as pd\n\ndf = pd.DataFrame({\n    'region': ['Norte', 'Sur', 'Norte', 'Este', 'Sur'],\n    'ventas': [100, 200, 150, 120, 180]\n})\n\n# Agrupa por region y suma ventas\nventas_por_region = ___\n\n# Imprime el resultado\nprint(ventas_por_region)",
      "solution": "ventas_por_region = df.groupby('region')['ventas'].sum()",
      "test": "ventas_por_region['Norte'] == 250 and ventas_por_region['Sur'] == 380",
      "hints": [
        "Usa df.groupby('region')['ventas'].sum()",
        "Primero agrupa con groupby(), luego selecciona columna y suma",
        "El resultado es una Series con region como índice"
      ],
      "successMessage": "¡Genial! GroupBy es fundamental para análisis de datos."
    },

    {
      "id": "learn_009",
      "title": "Pandas - Merge DataFrames",
      "instruction": "Haz un merge (join) entre df_usuarios y df_pedidos usando la columna 'user_id'. Tipo de merge: 'left'.",
      "theory": "merge() combina dos DataFrames basándose en columnas comunes (como JOIN en SQL). Tipos: 'inner' (solo matches), 'left' (todos del izquierdo), 'right', 'outer' (todos). Sintaxis: df1.merge(df2, on='columna', how='tipo')",
      "syntax": "df1.merge(df2, on='user_id', how='left')",
      "example": {
        "code": "import pandas as pd\nusers = pd.DataFrame({'id': [1, 2], 'name': ['Ana', 'Bob']})\norders = pd.DataFrame({'id': [1], 'amount': [100]})\nresult = users.merge(orders, on='id', how='left')\nprint(result)",
        "explanation": "Join de usuarios con órdenes"
      },
      "starterCode": "import pandas as pd\n\ndf_usuarios = pd.DataFrame({\n    'user_id': [1, 2, 3],\n    'nombre': ['Ana', 'Bob', 'Carlos']\n})\n\ndf_pedidos = pd.DataFrame({\n    'user_id': [1, 2],\n    'total': [100, 200]\n})\n\n# Merge con left join\nresultado = ___\n\n# Imprime el resultado\nprint(resultado)",
      "solution": "resultado = df_usuarios.merge(df_pedidos, on='user_id', how='left')",
      "test": "len(resultado) == 3 and 'nombre' in resultado.columns and 'total' in resultado.columns",
      "hints": [
        "Usa df_usuarios.merge(df_pedidos, on='user_id', how='left')",
        "on='user_id' indica la columna común",
        "how='left' incluye todos los usuarios"
      ],
      "successMessage": "¡Perfecto! Merge es esencial para combinar datos."
    },

    {
      "id": "learn_010",
      "title": "Pandas - Pivot Table",
      "instruction": "Crea una pivot table que muestre las ventas (sum) por 'region' (filas) y 'producto' (columnas).",
      "theory": "pivot_table() reorganiza datos de formato largo a ancho, aplicando agregaciones. Es como una tabla dinámica de Excel. Sintaxis: df.pivot_table(values='valor', index='fila', columns='columna', aggfunc='agregacion')",
      "syntax": "df.pivot_table(values='ventas', index='region', columns='producto', aggfunc='sum')",
      "example": {
        "code": "import pandas as pd\ndf = pd.DataFrame({\n    'mes': ['Ene', 'Feb', 'Ene'],\n    'categoria': ['A', 'A', 'B'],\n    'monto': [10, 20, 15]\n})\npivot = df.pivot_table(values='monto', index='mes', columns='categoria', aggfunc='sum')\nprint(pivot)",
        "explanation": "Pivot de montos por mes y categoría"
      },
      "starterCode": "import pandas as pd\n\ndf = pd.DataFrame({\n    'region': ['Norte', 'Sur', 'Norte', 'Sur'],\n    'producto': ['A', 'A', 'B', 'B'],\n    'ventas': [100, 200, 150, 250]\n})\n\n# Crea pivot table\npivot = ___\n\n# Imprime el resultado\nprint(pivot)",
      "solution": "pivot = df.pivot_table(values='ventas', index='region', columns='producto', aggfunc='sum')",
      "test": "pivot.loc['Norte', 'A'] == 100 and pivot.loc['Sur', 'B'] == 250",
      "hints": [
        "Usa df.pivot_table(values='ventas', index='region', columns='producto', aggfunc='sum')",
        "values: qué agregar, index: filas, columns: columnas",
        "aggfunc='sum' suma los valores"
      ],
      "successMessage": "¡Excelente! Pivot tables son poderosas para análisis."
    }
  ]
}
